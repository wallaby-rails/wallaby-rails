# @see https://github.com/wallaby-rails/wallaby/blob/master/docs/controller.md
class <%= base_class %> < <%= parent_base_class %>
  # Specify the model class if Wallaby doesn't get it right
  # self.model_class = <%= model_name %>

  # Specify the resource decorator if Wallaby doesn't get it right
  # self.resource_decorator = <%= model_name %>Decorator

  # Specify the model servicer if Wallaby doesn't get it right
  # self.model_servicer = <%= model_name %>Servicer

  # Specify the model authorizer if Wallaby doesn't get it right
  # self.model_authorizer = <%= model_name %>Authorizer

  # Specify the model paginator if Wallaby doesn't get it right
  # self.model_paginator = <%= model_name %>Paginator

  # Specify the max number of characters to truncate for index page
  # self.max_text_length = 20

  # Specify the default page size for pagination on index page
  # config.page_size = 20

  # Specify the sorting strategy to use. Valid values are:
  #   :multiple - default value, sorting is allowed on multiple columns
  #   :single - sorting is allowed on only one column
  # config.sorting_strategy = :single

  # Customize index page
  # def index
  #   # do something before the original action
  #   index!(
  #     location: nil # where to redirect when successful
  #   ) do |format| # `respond_with` block
  #     # do something here before rendering
  #   end
  # end

  # Customize new page
  # def new
  #   # do something before the original action
  #   new!(
  #     location: nil # where to redirect when successful
  #   ) do |format| # `respond_with` block
  #     # do something here before rendering
  #   end
  # end

  # Customize create action
  # def create
  #   # do something before the original action
  #   create!(
  #     params: nil, # params to use for the servicer
  #     location: nil # where to redirect when successful
  #   ) do |format| # `respond_with` block
  #     # do something here before rendering
  #   end
  # end

  # Customize show page
  # def show
  #   # do something before the original action
  #   show!(
  #     location: nil # where to redirect when successful
  #   ) do |format| # `respond_with` block
  #     # do something here before rendering
  #   end
  # end

  # Customize edit page
  # def edit
  #   # do something before the original action
  #   edit!(
  #     location: nil # where to redirect when successful
  #   ) do |format| # `respond_with` block
  #     # do something here before rendering
  #   end
  # end

  # Customize update action
  # def update
  #   # do something before the original action
  #   update!(
  #     params: nil, # params to use for the servicer
  #     location: nil # where to redirect when successful
  #   ) do |format| # `respond_with` block
  #     # do something here before rendering
  #   end
  # end

  # Customize destroy action
  # def destroy
  #   # do something before the original action
  #   destroy!(
  #     params: nil, # params to use for the servicer
  #     location: nil # where to redirect when successful
  #   ) do |format| # `respond_with` block
  #     # do something here before rendering
  #   end
  # end

  # Customize what parameters to be white-listed for mass assignment
  # def resource_params
  #   super # do something for all the subclasses
  # end

  # Customize how to return a collection
  # def collection
  #   collection!(
  #     params: nil, # params to use for the servicer
  #     paginate: true # whether to paginate the collection
  #   ) do |records|
  #     # do something here after original query is completed
  #     # but before `@collection` instance variable is set
  #     records
  #   end
  # end

  # Customize how to return a resource
  # def resource
  #   resource!(
  #     find_params: nil, # params/options for servicer's `find` action
  #     new_params: nil # params/options for servicer's `new` action
  #   ) do |record|
  #     # do something here after original query is completed
  #     # but before `@resource` instance variable is set
  #     record
  #   end
  # end
end
